<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubeflow</title><link>http://kubeflow.devops.delivery/technical-documentation/components/</link><description>Recent content on Kubeflow</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://kubeflow.devops.delivery/technical-documentation/components/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/argo-workflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/argo-workflows/</guid><description>Argo Workflows # Overview of Argo Workflows # Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. Argo Workflows is implemented as a Kubernetes CRD.
Define workflows where each step in the workflow is a container. Model multi-step workflows as a sequence of tasks or capture the dependencies between tasks using a graph (DAG). Easily run compute intensive jobs for machine learning or data processing in a fraction of the time using Argo Workflows on Kubernetes.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/authn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/authn/</guid><description>Authn HTTP Filter # Overview of the Authn HTTP Filter # This is a HTTP filter for Istio (Envoy) that validates User session and redirects to dex for authentication (if invalid).
Implementation Details # The component has the following directory structure:
./ ├── authn-envoy-filter.json.template # HTTP filter configuration ├── hub-component.yaml # Component definition ├── kustomization.yaml.template # Kustomize config └── oidc.yaml.template # Custom resource template for dex integration Parameters # The following component level parameters has been defined hub-component.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/central-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/central-dashboard/</guid><description>Central Dashboard # Overview of the Kubeflow Central Dashboard # Central Dashboard is Kubeflow landing page. It provides following functionality:
Web UI to access all Kubeflow components User registration flow Implementation Details # The component has the following directory structure:
./ ├── deployment_patch.yaml # Kustomize patch that adds extra env vars for pod ├── hub-component.yaml # Parameters definitions ├── kustomization.yaml.template # Kustomize file for ths component ├── links-config.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/dex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/dex/</guid><description>DEX # Overview of Argo Workflows # Dex is an identity service that uses OpenID Connect to drive authentication for other apps.
Dex acts as a portal to other identity providers through “connectors.” This lets Dex defer authentication to LDAP servers, SAML providers, or established identity providers like GitHub, Google, and Active Directory. Clients write their authentication logic once to talk to Dex, then Dex handles the protocols for a given backend.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/istio-ingress-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/istio-ingress-gateway/</guid><description>Istio Gateway # Along with creating a service mesh, Istio allows you to manage gateways, which are Envoy proxies running at the edge of the mesh, providing fine-grained control over traffic entering and leaving the mesh.
Current component will use a Helm chart to deploy an Istio Gateway
Parameters # Name Description Default Value hub.componentName Name of the istio ingress gateway dns.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/istio/</guid><description>Istio # Istio extends Kubernetes to establish a programmable, application-aware network using the powerful Envoy service proxy. Working with both Kubernetes and traditional workloads, Istio brings standard, universal traffic management, telemetry, and security to complex deployments.
Parameters # Name Description Default Value hub.componentName Name of the istio ingress gateway dns.domain Domain name of the kubeflow stack component.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/katib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/katib/</guid><description>Katib # Overview of the Katib # Katib is a Kubernetes-native project for automated machine learning (AutoML). Katib supports hyperparameter tuning, early stopping and neural architecture search (NAS). Learn more about AutoML at fast.ai, Google Cloud, Microsoft Azure or Amazon SageMaker.
Implementation Details # The component has the following directory structure:
./ ├── bin # Directory contains additional component hooks │ └── self-signed-ca.sh # Hook for generating self-signed certificates ├── crds # Directory contains custom resource definition files │ ├── experiment-crd.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/notebooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/notebooks/</guid><description>Notebooks # Overview of the Kubeflow Notebooks service # A web application to allow user to create, update and delete Jupyter Notebooks inside their profile. This application can work as a standalone application, however by default it wll be opened from Kubeflow Central dashboard via iframe.
Requirements # Requires kustomize CLI. Doesn&amp;rsquo;t work with kubectl -k ... Implementation Details # This component will deploy two services of the Jupyter notebooks:</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/pipelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/pipelines/</guid><description>Pipelines # Overview of the Kubeflow pipelines service # Kubeflow is a machine learning (ML) toolkit that is dedicated to making deployments of ML workflows on Kubernetes simple, portable, and scalable.
Kubeflow pipelines are reusable end-to-end ML workflows built using the Kubeflow Pipelines SDK.
The Kubeflow pipelines service has the following goals:
End to end orchestration: enabling and simplifying the orchestration of end to end machine learning pipelines Easy experimentation: making it easy for you to try numerous ideas and techniques, and manage your various trials/experiments.</description></item><item><title/><link>http://kubeflow.devops.delivery/technical-documentation/components/seldon-core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/seldon-core/</guid><description>Seldon Core # Overview of the Seldon Core # Implementation Details # The component has the following directory structure:
./ ├── charts # Directory contains helm charts archives ├── deploy.sh # Script to backup mysql data ├── hub-component.yaml # Parameters definitions ├── istio-gateway.yaml.template # Parameters definitions ├── undeploy.sh # Post deploy script to restore data from backup file if provided └── values.yaml.template # Base helm values template Parameters # The following component level parameters has been defined hub-component.</description></item><item><title>MinIO</title><link>http://kubeflow.devops.delivery/technical-documentation/components/minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/minio/</guid><description>MinIO # Overview of the MinIO # MinIO is a Kubernetes-native object store designed to provide high performance with an S3-compatible API.
Implementation Details # The component has the following directory structure:
./ ├── hub-component.yaml # Component definition ├── values-ingress.yaml.gotemplate # Helm chart ingress value template └── values.yaml.template # Helm chart value template Parameters # The following component level parameters has been defined hub-component.yaml:
Name Description Default Value component.</description></item><item><title>ML Metadata</title><link>http://kubeflow.devops.delivery/technical-documentation/components/ml-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/ml-metadata/</guid><description>ML Metadata # Overview of the ML Metadata # Kubeflow Pipelines backend stores runtime information of a pipeline run in Metadata store. Runtime information includes the status of a task, availability of artifacts, custom properties associated with Execution or Artifact, etc. Learn more at ML Metadata Get Started.
Implementation Details # The component has the following directory structure:
./ ├── db-params.env.template # Database connection parameters template ├── db-secrets.</description></item><item><title>MySQL</title><link>http://kubeflow.devops.delivery/technical-documentation/components/mysql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/mysql/</guid><description>MySQL # Overview of the MySQL # MySQL is a fast, reliable, scalable, and easy to use open source relational database system. Designed to handle mission-critical, heavy-load production applications.
Implementation Details # The component has the following directory structure:
./ ├── charts # Directory contains helm charts archives ├── backup # Script to backup mysql data ├── hub-component.yaml # Parameters definitions ├── post-deploy # Post deploy script to restore data from backup file if provided ├── values-auth.</description></item><item><title>TensorFlow Training</title><link>http://kubeflow.devops.delivery/technical-documentation/components/tensorflow-training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://kubeflow.devops.delivery/technical-documentation/components/tensorflow-training/</guid><description>TensorFlow Training # Overview of the TensorFlow Training # TFJob is a Kubernetes custom resource to run TensorFlow training jobs on Kubernetes. The Kubeflow implementation of TFJob is in training-operator.
Implementation Details # The component has the following directory structure:
./ ├── crds # Directory contains custom resource definition files │ └── tfjobs.yaml # CRD of TFJob kind ├── hub-component.yaml # Parameters definitions ├── kustomization.yaml.template # Kustomize file for ths component ├── pre-deploy # Script to download tarball from kubeflow distribution website └── pre-undeploy # Script to download tarball from kubeflow distribution website Parameters # The following component level parameters has been defined hub-component.</description></item></channel></rss>